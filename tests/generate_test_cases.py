import os

ROCE_TESTSUITE_PERFT_FENS_EPD_FILE = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    "roce_testsuite_perft_fens.epd"
)
ANDYGRANT_ETHEREAL_CHESS960_PERFT_FENS_epd_FILE = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    "andygrant_ethereal_chess960_perft_fens.epd"
)
TEST_FILE_HEADER = '''// Autogenerated test file

// clang-format off
#include <catch2/catch_test_macros.hpp>

#include <array>

#include "mpham_chess/board.hpp"
#include "mpham_chess/perft.hpp"
using namespace mpham_chess;

'''


def make_test_case(
    perft_fen_epd: str,
    test_case_tags: list[str]
) -> str:
    # "{FEN} ;D1 {NODES_1} ;D2 {NODES_2} ;[...] ;D[N] {NODES_N}"
    epd_fields = perft_fen_epd.split(' ;')

    fen, node_fields = epd_fields[0], epd_fields[1:]
    assert all([field[0] == 'D' for field in node_fields])
    depths_nodes = [field.split(' ') for field in node_fields]
    depths = [d_n[0][1:] for d_n in depths_nodes]
    assert all(
        d_1 == str(d_2)
        for (d_1, d_2) in zip(depths, range(1, int(depths[-1])+1))
    )
    nodes = [d_n[1] for d_n in depths_nodes]

    test_case_str = (
        f'TEST_CASE("Perft({depths[-1]}): {fen}", "'
        + ''.join([f'[{tag}]' for tag in test_case_tags])
        + '") {\n'
    )
    test_case_str += (
        f'\tboard pos{{"{fen}"}};\n'
        f'\tconst auto depth{{{depths[-1]}}};\n'
        f'\tconst auto perft_res{{perft<depth>(pos)}};\n'
        f'\tconst std::array<std::size_t, depth + 1> nodes{{{", ".join(["1"] + nodes)}}};\n'
        f'\tCHECK(perft_res._nodes == nodes);\n'
        '}\n\n'
    )

    return test_case_str


def make_test_file(
    perft_fens_epd_file: str,
    out_test_file: str,
    test_cases_tags: list[str]
) -> None:
    epd_line_set = set()

    with open(perft_fens_epd_file, 'r') as epd_file:
        with open(out_test_file, 'w') as test_file:
            test_file.writelines(TEST_FILE_HEADER)
            for i, epd_line in enumerate(epd_file.readlines()):
                if epd_line[0] == '#':
                    continue

                if epd_line in epd_line_set:
                    continue
                else:
                    epd_line_set.add(epd_line)

                test_file.writelines(
                    make_test_case(
                        epd_line,
                        test_cases_tags
                    )
                )


if __name__ == "__main__":
    make_test_file(
        ROCE_TESTSUITE_PERFT_FENS_EPD_FILE,
        "roce_testsuite.cpp",
        ["perft", "roce_testsuite"]
    )

    make_test_file(
        ANDYGRANT_ETHEREAL_CHESS960_PERFT_FENS_epd_FILE,
        "andygrant_ethereal_chess960.cpp",
        ["perft", "andygrant_ethereal", "chess960"]
    )
